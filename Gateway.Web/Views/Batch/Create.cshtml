@model Gateway.Web.Models.Batches.BatchConfigModel

@using System.Xml.Schema
@using Gateway.Web.Models
@using Gateway.Web.Models.Controllers
@{
    Layout = "~/Views/Shared/_Layout.NoFooter.cshtml";
    ViewBag.Title = "Batch";
    ViewBag.Current = "Configuration";
}
@{ Html.RenderPartial("_BatchConfigNav"); }

<div id="page-content-wrapper">
    <div class="hero-unit">

        <div class="container-fluid m-t-15">
            <div class="row">
                <div class="col-sm-12">
                    
                    @if (Model.IsUpdating)
                    {
                        <h3 class="text-lowercase">Update Batch Configuration</h3>
                    }
                    else
                    {
                        <h3 class="text-lowercase">Create Batch Configuration</h3>
                    }
                    
                    <div class="well m-t-15" hidden="@Model.IsUpdating">
                    @using (Html.BeginForm("Create", "Batch", FormMethod.Get))
                    {
                        <span>Base this configuration on</span>
                        @Html.DropDownListFor(m => m.ConfigurationTemplate, Model.ConfigurationTemplates, new {@name = "ConfigurationTemplate", @class = "form-control"})
                        <br/>
                        <button type="submit" class="btn btn-default">Reload</button>
                    }
                    </div>
                    
                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger" role="alert">
                            <b>The following errors have occurred:</b>
                            @Html.ValidationSummary(false, "", new {@class = "text-danger"})
                        </div>
                    }

                    <div class="m-t-20">
                        @using (Html.BeginForm("CreateOrUpdate", "Batch", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(m => m.ConfigurationId)

                            <div class="form-group">
                                @Html.ValidationSummary(false, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.Type, new { @class = "control-label" })
                                @Html.TextBoxFor(m => m.Type, new { @name = "Type", Placeholder = "A name used to determine the calculation/model used.", @class = "form-control" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.TradeSourceType, new { @class = "control-label" })
                                @Html.DropDownListFor(m => m.TradeSourceType, Model.TradeSourceTypes, new { @name = "TradeSourceType", Placeholder = "An indicator of how to retrieve trades based on the trade source value.", @class = "form-control" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.MarketDataMapName, new { @class = "control-label" })
                                @Html.DropDownListFor(m => m.MarketDataMapName, Model.MarketDataMaps, new { @name = "MarketDataMapName", Placeholder = "The market data map to use when resolving market data.", @class = "form-control" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.OutputType, new { @class = "control-label" })
                                @Html.DropDownListFor(m => m.OutputType, Model.OutputTypes, new { @name = "OutputType", Placeholder = "Whether to persist the results or return (e.g. nightly batch vs excel).", @class = "form-control" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.OutputTag, new { @class = "control-label" })
                                @Html.TextBoxFor(m => m.OutputTag, new { @name = "OutputTag", Placeholder = "One of the keys used to save the outputs to the database.", @class = "form-control" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(m => m.StateTtlMinutes, new { @class = "control-label" })
                                @Html.TextBoxFor(m => m.StateTtlMinutes, new { @name = "StateTtlMinutes", Placeholder = "Number of minutes to keep calculation state in Redis (0 - state cleared at end of batch).", @class = "form-control" })
                            </div>

                            <div class="form-group" hidden="@Model.IsUpdating">
                                @Html.CheckBoxFor(m => m.CreateAnother, new {@name = "CreateAnother" }) <span>Create Another</span><br/>
                                @Html.CheckBoxFor(m => m.CreateAnotherBasedOnCurrentConfiguration, new {@name = "CreateAnotherBasedOnCurrentConfiguration" }) <span>Base next configuration on this configuration</span>
                            </div>

                            <button type="submit" class="btn btn-default">Save</button>
                        }
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

